<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itit.dao.system.DeptDao">

    <!--关系映射-->
    <resultMap id="BaseResultMap" type="com.itit.domain.system.Dept" >
        <id property="id" column="dept_id"/>
        <result property="deptName" column="dept_name"/>
        <result property="state" column="state"/>
        <result property="companyId" column="company_id"/>
        <result property="companyName" column="company_name"/>
        <!--
          需求： 封装Dept对象的parent属性
          association  一对一封装数据
            property  要封装的对象
            javaType  要封装的对象的类型
            column    对象映射到表中的外键字段；
            select    根据查询的每条数据的parent_id，也就是部门id查询对象封装
                      简单来说，就是根据部门id查询获取部门对象，设置到parent属性中。
            fetchType
                lazy  懒加载； 当用到对象关联的对象属性时候，再执行select的查询
                eager 及时加载；默认值。
        -->
        <association property="parent"
                     column="parent_id"
                     javaType="com.itit.domain.system.Dept"
                     select="com.itit.dao.system.DeptDao.findById"
                     fetchType="lazy"/>
    </resultMap>

    <!--查询所有部门信息 企业id做为筛选条件  由于列名与属性名不一致使用resultMap映射 列名与属性名间的关系-->
    <select id="findAll" resultMap="BaseResultMap" >
        SELECT * FROM `pe_dept` WHERE `company_id`=#{companyId}
    </select>

    <select id="findById" resultMap="BaseResultMap">
        SELECT * FROM `pe_dept` WHERE `dept_id`=#{deptId}
    </select>

    <insert id="save">
        INSERT INTO `pe_dept`(`dept_id`,`dept_name`,`parent_id`,`state`,`company_id`,`company_name`)
        VALUES(#{id},#{deptName},#{parent.id},#{state},#{companyId},#{companyName})
    </insert>

    <update id="update" >
        UPDATE `pe_dept`
        SET `dept_name`=#{deptName},`state`=#{state},`company_id`=#{companyId},`company_name`=#{companyName},
            `parent_id`=
            /*判断父部门id是否为空串或 null*/
            <choose>
                <when test="parent != null and parent.id != '' and parent.id != null">
                    #{parent.id}
                </when>
                <otherwise>NULL</otherwise>
            </choose>
        WHERE `dept_id`=#{id}
    </update>

    <!--List<Dept> findByParentId(String id);-->
    <select id="findByParentId" resultType="com.itit.domain.system.Dept">
        SELECT * FROM `pe_dept` WHERE `parent_id`=#{id}
    </select>

    <!--void delete(String id);-->
    <delete id="delete">
        DELETE FROM  `pe_dept` WHERE `dept_id`=#{id}
    </delete>
    
</mapper>